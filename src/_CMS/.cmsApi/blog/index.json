{
  "article-1": {
    "title": "TESTING Title new",
    "image": "hero1.png",
    "date": "12-04-2019",
    "draft": true,
    "description": "Some basic description for this article to use as an excerpt. It should include good info to entice someone to click to read more.",
    "tags": {
      "tag-1": {
        "name": "tag 1",
        "slug": "tag-1",
        "title": "Tag 1"
      },
      "tag-2": {
        "name": "tag 2",
        "slug": "tag-2",
        "title": "Tag 2"
      },
      "tag-3": {
        "name": "tag 3",
        "slug": "tag-3",
        "title": "Tag 3"
      },
      "tag-4": {
        "name": "tag 4",
        "slug": "tag-4",
        "title": "Tag 4"
      },
      "tag-5": {
        "name": "tag 5",
        "slug": "tag-5",
        "title": "Tag 5"
      }
    },
    "slug": "article-1",
    "html": "<p>ARTICLE 1</p>\n<h1 id=\"head-1\">head 1</h1>\n<p><a href=\"https://www.google.com\" target=\"_blank\" rel=\"noopener\">I‚Äôm an inline-style link</a></p>\n<h2 id=\"heading-level-2\">Heading level 2</h2>\n<!--\n![Image Test](@/assets/hero1.png) -->\n<h1 id=\"heading-1as\">heading 1as</h1>\n<h2 id=\"heading-2a\">Heading 2a</h2>\n<p>ssss</p>\n<p>üòÑ</p>\n<h1 id=\"heading-1cb\">heading 1cb</h1>\n<h2 id=\"heading-2b\">heading 2b</h2>\n<h2 id=\"heading-2\">heading 2</h2>\n<h3 id=\"heading-3\">heading 3</h3>\n"
  },
  "nuxtify-project": {
    "title": "My Quest For the Ultimate Nuxt.js Wesbite Template",
    "date": "2019-02-10T00:00:00.000Z",
    "description": "Nuxtify, a Nuxt.js Website Boilerplate with Vuetify is introduced. It aims to be reusable, reliable, and scalable",
    "tags": {
      "nuxt": {
        "name": "nuxt",
        "slug": "nuxt",
        "title": "Nuxt"
      },
      "vue": {
        "name": "vue",
        "slug": "vue",
        "title": "Vue"
      }
    },
    "slug": "nuxtify-project",
    "html": "<p>I‚Äôve spent the past several months working with Nuxt and trying to compose an awesome starter template to use.</p>\n<p>I have had the following goals for it:</p>\n<ol>\n<li>Reusable</li>\n<li>Reliable</li>\n<li>Scalable</li>\n</ol>\n<p>While I was originally using TailwindCSS with PurgeCSS (which is an amazing combination) without a framework to keep my sites performant with smaller build sizes.I recently switched to using Vuetify instead.</p>\n<p>This change came in result of the newer ability to only include a site‚Äôs used components when building for production via tree shaking using VuetifyLoader.</p>\n<p>With that being said, I would like to introduce my new project which I call <strong>Nuxtify</strong> which aims to provide a starter template for best-practices, easy setup, and fantastic performance (<a href=\"\" target=\"_blank\" rel=\"noopener\"><em>See Performance Score Below</em></a>).</p>\n<p>I hope to produce a few articles over the next several weeks covering my results, tips, and anything that could help fellow developers.</p>\n<p>For now, I want to share <a href=\"https://github.com/davidroyer/nuxtify\" target=\"_blank\" rel=\"noopener\">the repo</a>, <a href=\"https://nuxtify.netlify.com/\" target=\"_blank\" rel=\"noopener\">the demo site</a>, and a few notable tidbits.</p>\n<h2 id=\"notable-tidbits\">Notable Tidbits</h2>\n<p>Here a few things you might be helpful or interesting, especially if you work with Nuxt.</p>\n<h3 id=\"configs\">Configs</h3>\n<p>I have a <code>configs</code> directory and then inside of <code>nuxt.config.js</code> I have added them to the <code>watch</code> option. This enhances the development experience by automatically restarting the server when there is a change in these files.</p>\n<pre class=\"language-js\"><code class=\"language-js\">watch<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'~/config/*'</span><span class=\"token punctuation\">]</span>\n</code></pre>\n<h3 id=\"layout-structure\">Layout Structure</h3>\n<p>Sections of site <code>layout.vue</code> file are separated into components creating a more organized and structured code base as show below:</p>\n<pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>template</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>v-app</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>v-site-header</span> <span class=\"token punctuation\">/></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>v-site-content</span> <span class=\"token punctuation\">/></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>v-mobile-nav</span> <span class=\"token punctuation\">/></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>v-site-footer</span> <span class=\"token punctuation\">/></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>v-app</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>template</span><span class=\"token punctuation\">></span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\">\n<span class=\"token keyword\">import</span> VMobileNav <span class=\"token keyword\">from</span> <span class=\"token string\">'@/components/VMobileNav.vue'</span>\n<span class=\"token keyword\">import</span> VSiteContent <span class=\"token keyword\">from</span> <span class=\"token string\">'@/components/VSiteContent.vue'</span>\n<span class=\"token keyword\">import</span> VSiteHeader <span class=\"token keyword\">from</span> <span class=\"token string\">'@/components/VSiteHeader.vue'</span>\n<span class=\"token keyword\">import</span> VSiteFooter <span class=\"token keyword\">from</span> <span class=\"token string\">'@/components/VSiteFooter.vue'</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">{</span>\n  components<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n    VMobileNav<span class=\"token punctuation\">,</span>\n    VSiteContent<span class=\"token punctuation\">,</span>\n    VSiteHeader<span class=\"token punctuation\">,</span>\n    VSiteFooter\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span>\n</code></pre>\n<p>If you are wondering, ‚ÄúWhere is the <code>&lt;nuxt /&gt;</code> component?‚Äù, it‚Äôs actually possible to place it inside a component file which I have done here by relocating it to the <code>v-site-content</code> component as seen below:</p>\n<pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>template</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>v-content</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>v-container</span><span class=\"token punctuation\">></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>nuxt</span> <span class=\"token punctuation\">/></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>v-container</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>v-content</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>template</span><span class=\"token punctuation\">></span></span>\n</code></pre>\n<h3 id=\"performance\">Performance</h3>\n<p>Nuxtify is currently achieving a Lighthouse score of 98-100. I personally believe it‚Äôs quite incredible to be able to harness a framework as versatile and powerful as Vuetify and produce such high-performing sites.</p>\n<p><img src=\"/blog-images/nuxtify-lighthouse.png\" alt=\"nuxtify-lighthouse\"></p>\n"
  },
  "nuxtjs-firebase-auth": {
    "title": "Using Firebase Auth With Nuxt.js",
    "subtitle": "Part 1",
    "date": "2017-10-11T00:00:00.000Z",
    "description": "This article is an overview of using Nuxt.js with Firebase Authentication. Learn how to check for admin access in your routes and use Vuex with Nuxt.js and Firebase to keep everything manageable.",
    "tags": {
      "vue": {
        "name": "vue",
        "slug": "vue",
        "title": "Vue"
      },
      "nuxt": {
        "name": "nuxt",
        "slug": "nuxt",
        "title": "Nuxt"
      },
      "firebase": {
        "name": "firebase",
        "slug": "firebase",
        "title": "Firebase"
      }
    },
    "slug": "nuxtjs-firebase-auth",
    "html": "<p>This article is an overview of using Nuxt.js with Firebase Authentication. In Part 2, I will provide a more detail explanation of the concepts used in this example.</p>\n<div class=\"flexContainer\">\n<a target=\"/\\_blank\" rel=\"noopener\" href=https://nuxt-firebase-auth.firebaseapp.com/>Live Demo</a>\n<a target=\"/\\_blank\" rel=\"noopener\" href=https://github.com/davidroyer/nuxt-firebase-auth>Github Repo</a>\n</div>\n<p><strong><em>Notes:</em></strong></p>\n<ul>\n<li>I am using SPA mode with Nuxt.js which is implemented by setting the option <code>mode: 'spa'</code> in <code>nuxt.config.js</code>.</li>\n<li>You need to enable the Sign-In Method for Google from the Authentication settings via your Firebase Console.</li>\n<li>I am using Firebase Hosting but it should work with any static hosting provider. However, you‚Äôll need to authorize that domain via your Firebase Console in Authentication settings via your Firebase Console under the Sign-In Methods Tab.</li>\n</ul>\n<p>I have created 3 files that handle the issues faced when attempting to use Firebase Auth with Nuxt.js.</p>\n<ul>\n<li><code>fireinit.js</code></li>\n<li><code>fireauth.js</code></li>\n<li><code>router-auth.js</code></li>\n</ul>\n<hr>\n<h2 id=\"firebase-app-setup\">Firebase App Setup</h2>\n<p>To setup/initialize the firebase app with credentials, I created <code>services/fireinit.js</code>. An issue commonly seen by developers is Firebase telling us an app already exist. The line below solves this issue.</p>\n<p><code>!firebase.apps.length ? firebase.initializeApp(config) : ''</code></p>\n<p>This is an <code>if/else</code> statement in shortened form. It checks if any firebase apps already exist.</p>\n<p>If one does not exist, initialize the app, otherwise do nothing because it‚Äôs already happened so we‚Äôre good to go.</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// This is `services/fireinit.js`</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">as</span> firebase <span class=\"token keyword\">from</span> <span class=\"token string\">'firebase/app'</span>\n<span class=\"token keyword\">import</span> <span class=\"token string\">'firebase/auth'</span>\n<span class=\"token keyword\">import</span> <span class=\"token string\">'firebase/firestore'</span>\n<span class=\"token keyword\">import</span> <span class=\"token string\">'firebase/database'</span>\n\n<span class=\"token keyword\">var</span> config <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  apiKey<span class=\"token punctuation\">:</span> <span class=\"token string\">'yourProjectValueHere'</span><span class=\"token punctuation\">,</span>\n  authDomain<span class=\"token punctuation\">:</span> <span class=\"token string\">'yourProjectValueHere'</span><span class=\"token punctuation\">,</span>\n  databaseURL<span class=\"token punctuation\">:</span> <span class=\"token string\">'yourProjectValueHere'</span><span class=\"token punctuation\">,</span>\n  projectId<span class=\"token punctuation\">:</span> <span class=\"token string\">'yourProjectValueHere'</span><span class=\"token punctuation\">,</span>\n  storageBucket<span class=\"token punctuation\">:</span> <span class=\"token string\">'yourProjectValueHere'</span><span class=\"token punctuation\">,</span>\n  messagingSenderId<span class=\"token punctuation\">:</span> <span class=\"token string\">'yourProjectValueHere'</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token operator\">!</span>firebase<span class=\"token punctuation\">.</span>apps<span class=\"token punctuation\">.</span>length <span class=\"token operator\">?</span> firebase<span class=\"token punctuation\">.</span><span class=\"token function\">initializeApp</span><span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">:</span> <span class=\"token string\">''</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> GoogleProvider <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">firebase<span class=\"token punctuation\">.</span>auth<span class=\"token punctuation\">.</span>GoogleAuthProvider</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> auth <span class=\"token operator\">=</span> firebase<span class=\"token punctuation\">.</span><span class=\"token function\">auth</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token constant\">DB</span> <span class=\"token operator\">=</span> firebase<span class=\"token punctuation\">.</span><span class=\"token function\">database</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> StoreDB <span class=\"token operator\">=</span> firebase<span class=\"token punctuation\">.</span><span class=\"token function\">firestore</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> firebase\n</code></pre>\n<hr>\n<h2 id=\"handling-user-authentication-state\">Handling User Authentication State</h2>\n<p>Firebase provides <code>onAuthStateChanged</code> to handle user state. I created <code>fireauth.js</code> to setup this functionality</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// This is `@plugins/fireauth.js`</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> auth <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@/services/fireinit.js'</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token parameter\">context</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> store <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> context\n\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    auth<span class=\"token punctuation\">.</span><span class=\"token function\">onAuthStateChanged</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">user</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>store<span class=\"token punctuation\">.</span><span class=\"token function\">commit</span><span class=\"token punctuation\">(</span><span class=\"token string\">'setUser'</span><span class=\"token punctuation\">,</span> user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span>\n      <span class=\"token keyword\">return</span> <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<hr>\n<h2 id=\"protecting-authenticated-routes\">Protecting Authenticated Routes</h2>\n<p><strong>Scenario 1:</strong><br>\nA user is already signed-in and the next route is <code>/login</code></p>\n<p><em>Redirect to <code>/admin</code></em></p>\n<p><strong>Scenario 2:</strong><br>\nThere is not a user signed-in and the next route is <code>/admin</code> or a sub-route such as, <code>/admin/settings</code></p>\n<p><em>Redirect to <code>/login</code></em></p>\n<p>This functions checks for the 2 scenarios:</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// This is `@middleware/router-auth.js`</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> store<span class=\"token punctuation\">,</span> redirect<span class=\"token punctuation\">,</span> route <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  store<span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>user <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> route<span class=\"token punctuation\">.</span>name <span class=\"token operator\">==</span> <span class=\"token string\">'login'</span> <span class=\"token operator\">?</span> <span class=\"token function\">redirect</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/admin'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">:</span> <span class=\"token string\">''</span>\n  store<span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>user <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">isAdminRoute</span><span class=\"token punctuation\">(</span>route<span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> <span class=\"token function\">redirect</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/login'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">:</span> <span class=\"token string\">''</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">isAdminRoute</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">route</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>route<span class=\"token punctuation\">.</span>matched<span class=\"token punctuation\">.</span><span class=\"token function\">some</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">record</span> <span class=\"token operator\">=></span> record<span class=\"token punctuation\">.</span>path <span class=\"token operator\">==</span> <span class=\"token string\">'/admin'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>We will tell Nuxt.js to use this file by declaring it in <code>nuxt.config.js</code> as follows:</p>\n<pre class=\"language-js\"><code class=\"language-js\">router<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n  middleware<span class=\"token punctuation\">:</span> <span class=\"token string\">'router-auth'</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>With all of this in place, we are able to use Firebase Authentication with Nuxt.js to protect the <code>/admin</code> route as well as child routes such as <code>/admin/settings</code>.</p>\n"
  },
  "nuxtjs-tips": {
    "title": "Tips After Building a Site with Nuxt.js",
    "data": "2017-09-18T00:00:00.000Z",
    "description": "A few simple tips for anyone using Nuxt.js. This includes covering how to handle mobile menu state once a link is choosen from the menu and making sure to close the menu when appropriate.",
    "tags": {
      "vue": {
        "name": "vue",
        "slug": "vue",
        "title": "Vue"
      },
      "nuxt": {
        "name": "nuxt",
        "slug": "nuxt",
        "title": "Nuxt"
      }
    },
    "slug": "nuxtjs-tips",
    "html": "<h1 id=\"tip-1---learn-vuex\">Tip 1 - Learn Vuex</h1>\n<p>I put off on learning Vuex for a long time, and used simpler ways of handling global state. When I took the time to understand Vuex though, it paid off greatly when working with Nuxt.js.</p>\n<hr>\n<h1 id=\"tip-2---using-middleware-for-mobile-menus\">Tip 2 - Using Middleware for Mobile Menus</h1>\n<p>When a link was clicked using the mobile menu, it would stay open instead of closing before transitioning routes. I wanted the menu to close on route change.</p>\n<p>A couple things needed to happen to accomplish this. (<em>Disclaimer: I am using Vuex for state management</em>)</p>\n<ol>\n<li>Use Vuex to keep track of my menu state.</li>\n</ol>\n<pre class=\"language-js\"><code class=\"language-js\">state<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n  menuIsActive<span class=\"token punctuation\">:</span> <span class=\"token boolean\">false</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\nmutations<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">toggleMenuState</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">state</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    state<span class=\"token punctuation\">.</span>menuIsActive <span class=\"token operator\">=</span> <span class=\"token operator\">!</span>state<span class=\"token punctuation\">.</span>menuIsActive\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<ol start=\"2\">\n<li>Add a function to the <code>middleware</code> directory. It checks if the menu is active. If so, toggle that state (making it inactive).</li>\n</ol>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// This is `middleware/menu.js`</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> store <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>store<span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>menuIsActive <span class=\"token operator\">===</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    store<span class=\"token punctuation\">.</span><span class=\"token function\">commit</span><span class=\"token punctuation\">(</span><span class=\"token string\">'toggleMenuState'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<ol start=\"3\">\n<li>Register this middleware to run when the route changes by adding it inside <code>nuxt.config.js</code>. It is set to <code>menu</code> because our middleware file name is <code>menu.js</code>.</li>\n</ol>\n<pre class=\"language-js\"><code class=\"language-js\">router<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n  middleware<span class=\"token punctuation\">:</span> <span class=\"token string\">'menu'</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<hr>\n<h1 id=\"tip-3---performance\">Tip 3 - Performance</h1>\n<p>I personally believe using the <a target=\"/\\_blank\" rel=\"noopener\" href=https://github.com/nuxt-community/modules/tree/master/modules/pwa>PWA Module</a> is the easiest modification one can do for the biggest impact on his/her site. While customization is possible, it‚Äôs not required. All that‚Äôs needed to begin reaping the benefits is adding 1 line to the modules sections of <code>nuxt.config.js</code> like so:</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// `nuxt.config.js`</span>\n\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  modules<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'@nuxtjs/pwa'</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>Also, I wanted to use a Google font via CDN but received a performance warning when testing with <a target=\"/\\_blank\" rel=\"noopener\" href=https://developers.google.com/web/tools/lighthouse/>Lighthouse</a>. I was able to eliminate the warning by preloading the font in <code>nuxt.config.js</code>.</p>\n<p><strong>Example:</strong></p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// `nuxt.config.js`</span>\n\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  head<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n    link<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>\n      <span class=\"token punctuation\">{</span>\n        rel<span class=\"token punctuation\">:</span> <span class=\"token string\">'preload'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token keyword\">as</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'style'</span><span class=\"token punctuation\">,</span>\n        href<span class=\"token punctuation\">:</span> <span class=\"token string\">'https://fonts.googleapis.com/css?family=Roboto'</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n"
  },
  "optimized-async-await": {
    "title": "Optimizing Multiple API Request With Async/Await",
    "draft": true,
    "slug": "optimized-async-await",
    "tags": {},
    "html": "<h2 id=\"the-scenario\">The Scenario</h2>\n<!-- We need to make multiple request to an API to get some data. We have an array of all the content types we need to make a request to. This means we need to loop through this array, make the request to the approapriate content type API endpoint and then handle the response. Additionally and most importantly, **we want these request to happen at the same time instead of sequentially (one after another).** -->\n<p>Imagine the following scenario:</p>\n<p>You want to get data from several API endpoints and use that data on your site or page. We want to take advantage of JavaScript‚Äôs async ability by requesting these resources simultaneously.</p>\n<p>So if we had an array of endpoints we knew we needed to hit and used a <code>forEach</code> loop to make this functionality, it would cause these requests to happen synchronously (one right after another).</p>\n<p>However, by using <code>.map()</code> and <code>Promise.all()</code>, we can keep it async <strong>and</strong> write the code in a clean, concise manner.</p>\n<p><strong>Here is the complete example we will work through step-by-step:</strong></p>\n<!-- When You have an multiple endpoints you need to make requests to from an API and the order of execution does not matter, you can use async await as follows: -->\n<!-- _**We Will Work Through The Following Code Step-By-Step**_ -->\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> axios <span class=\"token keyword\">from</span> <span class=\"token string\">'axios'</span>\naxios<span class=\"token punctuation\">.</span>defaults<span class=\"token punctuation\">.</span>baseURL <span class=\"token operator\">=</span> <span class=\"token string\">'https://jsonplaceholder.typicode.com'</span>\n\n<span class=\"token keyword\">const</span> dataStore <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">const</span> resourceTypes <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'posts'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'users'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'todos'</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">getResource</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">type</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> data <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> axios<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>type<span class=\"token punctuation\">)</span>\n  dataStore<span class=\"token punctuation\">[</span>type<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> data\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">getAllResources</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> DataPromises <span class=\"token operator\">=</span> resourceTypes<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token function\">getResource</span><span class=\"token punctuation\">(</span>resourceType<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">await</span> Promise<span class=\"token punctuation\">.</span><span class=\"token function\">all</span><span class=\"token punctuation\">(</span>DataPromises<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">getAllResources</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<div class=\"tip custom-block\"><p class=\"custom-block-title\">YOU SHOULD KNOW...</p>\n<p>üëç <em>In Part 2, we‚Äôll show how to use this approach to make batch updates</em>.</p>\n</div>\n<h2 id=\"the-breakdown\">The Breakdown</h2>\n<h3 id=\"step-1\">Step 1</h3>\n<p>This is our initial setup. We are:</p>\n<ol>\n<li>Setting up <code>axios</code> to use to make our API request</li>\n<li>Creating <code>dataStore</code> as an empty object to use as state or store</li>\n<li>Creating <code>resourceTypes</code> as an array of the endpoints we want to call</li>\n</ol>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> axios <span class=\"token keyword\">from</span> <span class=\"token string\">'axios'</span>\naxios<span class=\"token punctuation\">.</span>defaults<span class=\"token punctuation\">.</span>baseURL <span class=\"token operator\">=</span> <span class=\"token string\">'https://jsonplaceholder.typicode.com'</span>\n\n<span class=\"token keyword\">const</span> dataStore <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">const</span> resourceTypes <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'posts'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'users'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'todos'</span><span class=\"token punctuation\">]</span>\n</code></pre>\n<h3 id=\"step-2\">Step 2</h3>\n<p>We‚Äôre creating a function that is responsible for requesting and returning the data for a specific API endpoint</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">getResource</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">type</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> data <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> axios<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>type<span class=\"token punctuation\">)</span>\n  dataStore<span class=\"token punctuation\">[</span>type<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> data\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h3 id=\"step-3\">Step 3</h3>\n<p>Create a function that uses <code>Array.map()</code> to execute the async/await logic for each request.<br>\nThis creates an array of Promises.</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">getAllResources</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> DataPromises <span class=\"token operator\">=</span> resourceTypes<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token function\">getResource</span><span class=\"token punctuation\">(</span>resourceType<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">await</span> Promise<span class=\"token punctuation\">.</span><span class=\"token function\">all</span><span class=\"token punctuation\">(</span>DataPromises<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h3 id=\"step-4\">Step 4</h3>\n<p>Call the function</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">getAllResources</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n</code></pre>\n"
  },
  "part-2-optimized-async-await": {
    "title": "Part 2 - Optimizing Multiple API Request With Async/Await",
    "draft": true,
    "slug": "part-2-optimized-async-await",
    "tags": {},
    "html": "<h2 id=\"the-scenario\">The Scenario</h2>\n<!-- We need to make multiple request to an API to get some data. We have an array of all the content types we need to make a request to. This means we need to loop through this array, make the request to the approapriate content type API endpoint and then handle the response. Additionally and most importantly, **we want these request to happen at the same time instead of sequentially (one after another).** -->\n<p>Imagine the following scenario:</p>\n<p>You want to get data from several API endpoints and use that data on your site or page. We want to take advantage of JavaScript‚Äôs async ability by requesting these resources simultaneously.</p>\n<p>So if we had an array of endpoints we knew we needed to hit and used a <code>forEach</code> loop to make this functionality, it would cause these requests to happen synchronously (one right after another).</p>\n<p>However, by using <code>.map()</code> and <code>Promise.all()</code>, we can keep it async <strong>and</strong> write the code in a clean, concise manner.</p>\n<p>When You have an multiple endpoints you need to make requests to from an API and the order of execution does not matter, you can use async await as follows:</p>\n<p><em><strong>We Will Work Through The Following Code Step-By-Step</strong></em></p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> axios <span class=\"token keyword\">from</span> <span class=\"token string\">'axios'</span>\n\naxios<span class=\"token punctuation\">.</span>defaults<span class=\"token punctuation\">.</span>baseURL <span class=\"token operator\">=</span> <span class=\"token string\">'https://jsonplaceholder.typicode.com'</span>\n\n<span class=\"token keyword\">const</span> dataStore <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">const</span> resourceTypes <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'posts'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'users'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'todos'</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">getResource</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">type</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> data <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> axios<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>type<span class=\"token punctuation\">)</span>\n  dataStore<span class=\"token punctuation\">[</span>type<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> data\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">getAllResources</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> DataPromises <span class=\"token operator\">=</span> resourceTypes<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token function\">getResource</span><span class=\"token punctuation\">(</span>resourceType<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">await</span> Promise<span class=\"token punctuation\">.</span><span class=\"token function\">all</span><span class=\"token punctuation\">(</span>DataPromises<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">getAllResources</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<!-- <br> -->\n<h2 id=\"the-breakdown\">The Breakdown</h2>\n<h3 id=\"step-1\">Step 1</h3>\n<p>Create an empty object that we‚Äôll use as our sample <strong>store</strong> an array of the endpoints listed below.</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> dataStore <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">const</span> resourceTypes <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'posts'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'users'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'todos'</span><span class=\"token punctuation\">]</span>\n</code></pre>\n<h3 id=\"step-2\">Step 2</h3>\n<p>Create a function that is responsible for requesting and returning the data for a specific API endpoint</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">getResource</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">type</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> data <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> axios<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>type<span class=\"token punctuation\">)</span>\n  dataStore<span class=\"token punctuation\">[</span>type<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> data\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h3 id=\"step-3\">Step 3</h3>\n<p>Create a function that uses <code>Array.map()</code> to execute the async/await logic for each request. This creates an Array of Promises.</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">getAllResources</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> DataPromises <span class=\"token operator\">=</span> resourceTypes<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token function\">getResource</span><span class=\"token punctuation\">(</span>resourceType<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">await</span> Promise<span class=\"token punctuation\">.</span><span class=\"token function\">all</span><span class=\"token punctuation\">(</span>DataPromises<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>Await the complete response by using <code>Promise.all()</code></p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">await</span> Promise<span class=\"token punctuation\">.</span><span class=\"token function\">all</span><span class=\"token punctuation\">(</span>DataPromises<span class=\"token punctuation\">)</span>\n</code></pre>\n<h3 id=\"step-4\">Step 4</h3>\n<p>All of this functionality needs to be wrapped within an <code>async</code> function.</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">getAllResources</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> DataPromises <span class=\"token operator\">=</span> contentTypes<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">async</span> <span class=\"token parameter\">endpoint</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> data <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> axios<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>endpoint<span class=\"token punctuation\">)</span>\n    content<span class=\"token punctuation\">[</span>endpoint<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> data\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">await</span> Promise<span class=\"token punctuation\">.</span><span class=\"token function\">all</span><span class=\"token punctuation\">(</span>DataPromises<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h3 id=\"step-5\">Step 5</h3>\n<p>Call the function</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">getAllResources</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n</code></pre>\n"
  }
}